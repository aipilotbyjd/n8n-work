// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: engine.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EngineService_RunWorkflow_FullMethodName          = "/engine.EngineService/RunWorkflow"
	EngineService_StepExec_FullMethodName             = "/engine.EngineService/StepExec"
	EngineService_StepDone_FullMethodName             = "/engine.EngineService/StepDone"
	EngineService_CancelExecution_FullMethodName      = "/engine.EngineService/CancelExecution"
	EngineService_GetExecutionStatus_FullMethodName   = "/engine.EngineService/GetExecutionStatus"
	EngineService_ListActiveExecutions_FullMethodName = "/engine.EngineService/ListActiveExecutions"
	EngineService_GetResourceUsage_FullMethodName     = "/engine.EngineService/GetResourceUsage"
	EngineService_UpdateRateLimits_FullMethodName     = "/engine.EngineService/UpdateRateLimits"
	EngineService_Health_FullMethodName               = "/engine.EngineService/Health"
)

// EngineServiceClient is the client API for EngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Engine service for workflow execution management
type EngineServiceClient interface {
	// Execution Management
	RunWorkflow(ctx context.Context, in *RunWorkflowRequest, opts ...grpc.CallOption) (*RunWorkflowResponse, error)
	StepExec(ctx context.Context, in *StepExecRequest, opts ...grpc.CallOption) (*StepExecResponse, error)
	StepDone(ctx context.Context, in *StepDoneRequest, opts ...grpc.CallOption) (*StepDoneResponse, error)
	CancelExecution(ctx context.Context, in *CancelExecutionRequest, opts ...grpc.CallOption) (*CancelExecutionResponse, error)
	// Status and Monitoring
	GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (*GetExecutionStatusResponse, error)
	ListActiveExecutions(ctx context.Context, in *ListActiveExecutionsRequest, opts ...grpc.CallOption) (*ListActiveExecutionsResponse, error)
	// Resource Management
	GetResourceUsage(ctx context.Context, in *GetResourceUsageRequest, opts ...grpc.CallOption) (*GetResourceUsageResponse, error)
	UpdateRateLimits(ctx context.Context, in *UpdateRateLimitsRequest, opts ...grpc.CallOption) (*UpdateRateLimitsResponse, error)
	// Health Check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type engineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineServiceClient(cc grpc.ClientConnInterface) EngineServiceClient {
	return &engineServiceClient{cc}
}

func (c *engineServiceClient) RunWorkflow(ctx context.Context, in *RunWorkflowRequest, opts ...grpc.CallOption) (*RunWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunWorkflowResponse)
	err := c.cc.Invoke(ctx, EngineService_RunWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) StepExec(ctx context.Context, in *StepExecRequest, opts ...grpc.CallOption) (*StepExecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StepExecResponse)
	err := c.cc.Invoke(ctx, EngineService_StepExec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) StepDone(ctx context.Context, in *StepDoneRequest, opts ...grpc.CallOption) (*StepDoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StepDoneResponse)
	err := c.cc.Invoke(ctx, EngineService_StepDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) CancelExecution(ctx context.Context, in *CancelExecutionRequest, opts ...grpc.CallOption) (*CancelExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelExecutionResponse)
	err := c.cc.Invoke(ctx, EngineService_CancelExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (*GetExecutionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionStatusResponse)
	err := c.cc.Invoke(ctx, EngineService_GetExecutionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) ListActiveExecutions(ctx context.Context, in *ListActiveExecutionsRequest, opts ...grpc.CallOption) (*ListActiveExecutionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActiveExecutionsResponse)
	err := c.cc.Invoke(ctx, EngineService_ListActiveExecutions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) GetResourceUsage(ctx context.Context, in *GetResourceUsageRequest, opts ...grpc.CallOption) (*GetResourceUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceUsageResponse)
	err := c.cc.Invoke(ctx, EngineService_GetResourceUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) UpdateRateLimits(ctx context.Context, in *UpdateRateLimitsRequest, opts ...grpc.CallOption) (*UpdateRateLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRateLimitsResponse)
	err := c.cc.Invoke(ctx, EngineService_UpdateRateLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, EngineService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServiceServer is the server API for EngineService service.
// All implementations must embed UnimplementedEngineServiceServer
// for forward compatibility.
//
// Engine service for workflow execution management
type EngineServiceServer interface {
	// Execution Management
	RunWorkflow(context.Context, *RunWorkflowRequest) (*RunWorkflowResponse, error)
	StepExec(context.Context, *StepExecRequest) (*StepExecResponse, error)
	StepDone(context.Context, *StepDoneRequest) (*StepDoneResponse, error)
	CancelExecution(context.Context, *CancelExecutionRequest) (*CancelExecutionResponse, error)
	// Status and Monitoring
	GetExecutionStatus(context.Context, *GetExecutionStatusRequest) (*GetExecutionStatusResponse, error)
	ListActiveExecutions(context.Context, *ListActiveExecutionsRequest) (*ListActiveExecutionsResponse, error)
	// Resource Management
	GetResourceUsage(context.Context, *GetResourceUsageRequest) (*GetResourceUsageResponse, error)
	UpdateRateLimits(context.Context, *UpdateRateLimitsRequest) (*UpdateRateLimitsResponse, error)
	// Health Check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedEngineServiceServer()
}

// UnimplementedEngineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngineServiceServer struct{}

func (UnimplementedEngineServiceServer) RunWorkflow(context.Context, *RunWorkflowRequest) (*RunWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedEngineServiceServer) StepExec(context.Context, *StepExecRequest) (*StepExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StepExec not implemented")
}
func (UnimplementedEngineServiceServer) StepDone(context.Context, *StepDoneRequest) (*StepDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StepDone not implemented")
}
func (UnimplementedEngineServiceServer) CancelExecution(context.Context, *CancelExecutionRequest) (*CancelExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExecution not implemented")
}
func (UnimplementedEngineServiceServer) GetExecutionStatus(context.Context, *GetExecutionStatusRequest) (*GetExecutionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionStatus not implemented")
}
func (UnimplementedEngineServiceServer) ListActiveExecutions(context.Context, *ListActiveExecutionsRequest) (*ListActiveExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveExecutions not implemented")
}
func (UnimplementedEngineServiceServer) GetResourceUsage(context.Context, *GetResourceUsageRequest) (*GetResourceUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceUsage not implemented")
}
func (UnimplementedEngineServiceServer) UpdateRateLimits(context.Context, *UpdateRateLimitsRequest) (*UpdateRateLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRateLimits not implemented")
}
func (UnimplementedEngineServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedEngineServiceServer) mustEmbedUnimplementedEngineServiceServer() {}
func (UnimplementedEngineServiceServer) testEmbeddedByValue()                       {}

// UnsafeEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServiceServer will
// result in compilation errors.
type UnsafeEngineServiceServer interface {
	mustEmbedUnimplementedEngineServiceServer()
}

func RegisterEngineServiceServer(s grpc.ServiceRegistrar, srv EngineServiceServer) {
	// If the following call pancis, it indicates UnimplementedEngineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EngineService_ServiceDesc, srv)
}

func _EngineService_RunWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).RunWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_RunWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).RunWorkflow(ctx, req.(*RunWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_StepExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).StepExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_StepExec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).StepExec(ctx, req.(*StepExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_StepDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).StepDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_StepDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).StepDone(ctx, req.(*StepDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_CancelExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).CancelExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_CancelExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).CancelExecution(ctx, req.(*CancelExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_GetExecutionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetExecutionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_GetExecutionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetExecutionStatus(ctx, req.(*GetExecutionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_ListActiveExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).ListActiveExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_ListActiveExecutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).ListActiveExecutions(ctx, req.(*ListActiveExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_GetResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_GetResourceUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetResourceUsage(ctx, req.(*GetResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_UpdateRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).UpdateRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_UpdateRateLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).UpdateRateLimits(ctx, req.(*UpdateRateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineService_ServiceDesc is the grpc.ServiceDesc for EngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.EngineService",
	HandlerType: (*EngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunWorkflow",
			Handler:    _EngineService_RunWorkflow_Handler,
		},
		{
			MethodName: "StepExec",
			Handler:    _EngineService_StepExec_Handler,
		},
		{
			MethodName: "StepDone",
			Handler:    _EngineService_StepDone_Handler,
		},
		{
			MethodName: "CancelExecution",
			Handler:    _EngineService_CancelExecution_Handler,
		},
		{
			MethodName: "GetExecutionStatus",
			Handler:    _EngineService_GetExecutionStatus_Handler,
		},
		{
			MethodName: "ListActiveExecutions",
			Handler:    _EngineService_ListActiveExecutions_Handler,
		},
		{
			MethodName: "GetResourceUsage",
			Handler:    _EngineService_GetResourceUsage_Handler,
		},
		{
			MethodName: "UpdateRateLimits",
			Handler:    _EngineService_UpdateRateLimits_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _EngineService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine.proto",
}
