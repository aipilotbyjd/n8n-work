apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-runner-js
  namespace: n8n-work
  labels:
    app: node-runner-js
    component: node-runner
    tier: execution
    version: v1.0.0
spec:
  replicas: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 2
  selector:
    matchLabels:
      app: node-runner-js
  template:
    metadata:
      labels:
        app: node-runner-js
        component: node-runner
        tier: execution
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        container.apparmor.security.beta.kubernetes.io/node-runner-js: runtime/default
    spec:
      serviceAccountName: node-runner-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        supplementalGroups: [1001]
        seccompProfile:
          type: RuntimeDefault
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: node-runner-js
        image: n8n-work/node-runner-js:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: grpc
          containerPort: 5002
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: GRPC_PORT
          value: "5002"
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: url
        - name: ISOLATION_DEFAULT
          value: "process"
        - name: MICROVM_ENABLED
          value: "false"
        - name: RUNNER_CONCURRENCY
          value: "50"
        - name: ALLOWED_EGRESS
          value: "*.googleapis.com,*.github.com,registry.npmjs.org"
        - name: MAX_MEMORY_MB
          value: "512"
        - name: MAX_CPU_PERCENT
          value: "80"
        - name: MAX_EXECUTION_TIME
          value: "300"
        - name: ENABLE_SECURITY_SCANNING
          value: "true"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "4Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "8Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Need write access for temporary files in sandbox
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
            add:
            - NET_ADMIN  # Required for network isolation
            - SYS_ADMIN  # Required for process isolation
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: sandbox-tmp
          mountPath: /app/sandbox-tmp
        - name: node-modules-cache
          mountPath: /app/node_modules_cache
        - name: security-policies
          mountPath: /app/security
          readOnly: true
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: sandbox-tmp
        emptyDir:
          sizeLimit: 2Gi
      - name: node-modules-cache
        emptyDir:
          sizeLimit: 1Gi
      - name: security-policies
        configMap:
          name: security-policies
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - node-runner-js
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - memory-optimized
          - weight: 60
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values:
                - execution
      tolerations:
      - key: "execution-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: node-runner-js
---
apiVersion: v1
kind: Service
metadata:
  name: node-runner-service
  namespace: n8n-work
  labels:
    app: node-runner-js
    component: node-runner
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 5002
    targetPort: grpc
    protocol: TCP
  selector:
    app: node-runner-js
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-runner-service-account
  namespace: n8n-work
  labels:
    app: node-runner-js
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: n8n-work
  name: node-runner-role
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: node-runner-rolebinding
  namespace: n8n-work
subjects:
- kind: ServiceAccount
  name: node-runner-service-account
  namespace: n8n-work
roleRef:
  kind: Role
  name: node-runner-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: node-runner-pdb
  namespace: n8n-work
spec:
  minAvailable: 7
  selector:
    matchLabels:
      app: node-runner-js
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: node-runner-hpa
  namespace: n8n-work
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: node-runner-js
  minReplicas: 10
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  - type: Pods
    pods:
      metric:
        name: active_executions_per_pod
      target:
        type: AverageValue
        averageValue: "30"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 10
        periodSeconds: 30
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: node-runner-network-policy
  namespace: n8n-work
spec:
  podSelector:
    matchLabels:
      app: node-runner-js
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: engine-go
    ports:
    - protocol: TCP
      port: 5002
  - from:
    - podSelector:
        matchLabels:
          app: orchestrator-nest
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 5672  # RabbitMQ
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for allowed external APIs
    - protocol: TCP
      port: 80   # HTTP for allowed external APIs