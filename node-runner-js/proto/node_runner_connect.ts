// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=.js"
// @generated from file node_runner.proto (package node_runner, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CancelNodeExecutionRequest, CancelNodeExecutionResponse, ExecuteNodeRequest, ExecuteNodeResponse, GetNodeSchemaRequest, GetNodeSchemaResponse, GetRunnerStatusRequest, GetRunnerStatusResponse, HealthRequest, HealthResponse, InstallPluginRequest, InstallPluginResponse, ListNodesRequest, ListNodesResponse, RegisterNodeRequest, RegisterNodeResponse, UninstallPluginRequest, UninstallPluginResponse, UnregisterNodeRequest, UnregisterNodeResponse, UpdateSecurityPolicyRequest, UpdateSecurityPolicyResponse, ValidatePluginRequest, ValidatePluginResponse } from "./node_runner_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Node Runner service for executing workflow nodes
 *
 * @generated from service node_runner.NodeRunnerService
 */
export const NodeRunnerService = {
  typeName: "node_runner.NodeRunnerService",
  methods: {
    /**
     * Node Execution
     *
     * @generated from rpc node_runner.NodeRunnerService.ExecuteNode
     */
    executeNode: {
      name: "ExecuteNode",
      I: ExecuteNodeRequest,
      O: ExecuteNodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc node_runner.NodeRunnerService.CancelNodeExecution
     */
    cancelNodeExecution: {
      name: "CancelNodeExecution",
      I: CancelNodeExecutionRequest,
      O: CancelNodeExecutionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Node Management
     *
     * @generated from rpc node_runner.NodeRunnerService.RegisterNode
     */
    registerNode: {
      name: "RegisterNode",
      I: RegisterNodeRequest,
      O: RegisterNodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc node_runner.NodeRunnerService.UnregisterNode
     */
    unregisterNode: {
      name: "UnregisterNode",
      I: UnregisterNodeRequest,
      O: UnregisterNodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc node_runner.NodeRunnerService.ListNodes
     */
    listNodes: {
      name: "ListNodes",
      I: ListNodesRequest,
      O: ListNodesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc node_runner.NodeRunnerService.GetNodeSchema
     */
    getNodeSchema: {
      name: "GetNodeSchema",
      I: GetNodeSchemaRequest,
      O: GetNodeSchemaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Plugin Management
     *
     * @generated from rpc node_runner.NodeRunnerService.InstallPlugin
     */
    installPlugin: {
      name: "InstallPlugin",
      I: InstallPluginRequest,
      O: InstallPluginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc node_runner.NodeRunnerService.UninstallPlugin
     */
    uninstallPlugin: {
      name: "UninstallPlugin",
      I: UninstallPluginRequest,
      O: UninstallPluginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc node_runner.NodeRunnerService.ValidatePlugin
     */
    validatePlugin: {
      name: "ValidatePlugin",
      I: ValidatePluginRequest,
      O: ValidatePluginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Runtime Management
     *
     * @generated from rpc node_runner.NodeRunnerService.GetRunnerStatus
     */
    getRunnerStatus: {
      name: "GetRunnerStatus",
      I: GetRunnerStatusRequest,
      O: GetRunnerStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc node_runner.NodeRunnerService.UpdateSecurityPolicy
     */
    updateSecurityPolicy: {
      name: "UpdateSecurityPolicy",
      I: UpdateSecurityPolicyRequest,
      O: UpdateSecurityPolicyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Health Check
     *
     * @generated from rpc node_runner.NodeRunnerService.Health
     */
    health: {
      name: "Health",
      I: HealthRequest,
      O: HealthResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

