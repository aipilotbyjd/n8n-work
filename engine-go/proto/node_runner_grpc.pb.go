// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: node_runner.proto

package node_runner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeRunnerService_ExecuteNode_FullMethodName          = "/node_runner.NodeRunnerService/ExecuteNode"
	NodeRunnerService_CancelNodeExecution_FullMethodName  = "/node_runner.NodeRunnerService/CancelNodeExecution"
	NodeRunnerService_RegisterNode_FullMethodName         = "/node_runner.NodeRunnerService/RegisterNode"
	NodeRunnerService_UnregisterNode_FullMethodName       = "/node_runner.NodeRunnerService/UnregisterNode"
	NodeRunnerService_ListNodes_FullMethodName            = "/node_runner.NodeRunnerService/ListNodes"
	NodeRunnerService_GetNodeSchema_FullMethodName        = "/node_runner.NodeRunnerService/GetNodeSchema"
	NodeRunnerService_InstallPlugin_FullMethodName        = "/node_runner.NodeRunnerService/InstallPlugin"
	NodeRunnerService_UninstallPlugin_FullMethodName      = "/node_runner.NodeRunnerService/UninstallPlugin"
	NodeRunnerService_ValidatePlugin_FullMethodName       = "/node_runner.NodeRunnerService/ValidatePlugin"
	NodeRunnerService_GetRunnerStatus_FullMethodName      = "/node_runner.NodeRunnerService/GetRunnerStatus"
	NodeRunnerService_UpdateSecurityPolicy_FullMethodName = "/node_runner.NodeRunnerService/UpdateSecurityPolicy"
	NodeRunnerService_Health_FullMethodName               = "/node_runner.NodeRunnerService/Health"
)

// NodeRunnerServiceClient is the client API for NodeRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Node Runner service for executing workflow nodes
type NodeRunnerServiceClient interface {
	// Node Execution
	ExecuteNode(ctx context.Context, in *ExecuteNodeRequest, opts ...grpc.CallOption) (*ExecuteNodeResponse, error)
	CancelNodeExecution(ctx context.Context, in *CancelNodeExecutionRequest, opts ...grpc.CallOption) (*CancelNodeExecutionResponse, error)
	// Node Management
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	UnregisterNode(ctx context.Context, in *UnregisterNodeRequest, opts ...grpc.CallOption) (*UnregisterNodeResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNodeSchema(ctx context.Context, in *GetNodeSchemaRequest, opts ...grpc.CallOption) (*GetNodeSchemaResponse, error)
	// Plugin Management
	InstallPlugin(ctx context.Context, in *InstallPluginRequest, opts ...grpc.CallOption) (*InstallPluginResponse, error)
	UninstallPlugin(ctx context.Context, in *UninstallPluginRequest, opts ...grpc.CallOption) (*UninstallPluginResponse, error)
	ValidatePlugin(ctx context.Context, in *ValidatePluginRequest, opts ...grpc.CallOption) (*ValidatePluginResponse, error)
	// Runtime Management
	GetRunnerStatus(ctx context.Context, in *GetRunnerStatusRequest, opts ...grpc.CallOption) (*GetRunnerStatusResponse, error)
	UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*UpdateSecurityPolicyResponse, error)
	// Health Check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type nodeRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeRunnerServiceClient(cc grpc.ClientConnInterface) NodeRunnerServiceClient {
	return &nodeRunnerServiceClient{cc}
}

func (c *nodeRunnerServiceClient) ExecuteNode(ctx context.Context, in *ExecuteNodeRequest, opts ...grpc.CallOption) (*ExecuteNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteNodeResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_ExecuteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) CancelNodeExecution(ctx context.Context, in *CancelNodeExecutionRequest, opts ...grpc.CallOption) (*CancelNodeExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelNodeExecutionResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_CancelNodeExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_RegisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) UnregisterNode(ctx context.Context, in *UnregisterNodeRequest, opts ...grpc.CallOption) (*UnregisterNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterNodeResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_UnregisterNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) GetNodeSchema(ctx context.Context, in *GetNodeSchemaRequest, opts ...grpc.CallOption) (*GetNodeSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeSchemaResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_GetNodeSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) InstallPlugin(ctx context.Context, in *InstallPluginRequest, opts ...grpc.CallOption) (*InstallPluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallPluginResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_InstallPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) UninstallPlugin(ctx context.Context, in *UninstallPluginRequest, opts ...grpc.CallOption) (*UninstallPluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallPluginResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_UninstallPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) ValidatePlugin(ctx context.Context, in *ValidatePluginRequest, opts ...grpc.CallOption) (*ValidatePluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePluginResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_ValidatePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) GetRunnerStatus(ctx context.Context, in *GetRunnerStatusRequest, opts ...grpc.CallOption) (*GetRunnerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunnerStatusResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_GetRunnerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*UpdateSecurityPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecurityPolicyResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_UpdateSecurityPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRunnerServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, NodeRunnerService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRunnerServiceServer is the server API for NodeRunnerService service.
// All implementations must embed UnimplementedNodeRunnerServiceServer
// for forward compatibility.
//
// Node Runner service for executing workflow nodes
type NodeRunnerServiceServer interface {
	// Node Execution
	ExecuteNode(context.Context, *ExecuteNodeRequest) (*ExecuteNodeResponse, error)
	CancelNodeExecution(context.Context, *CancelNodeExecutionRequest) (*CancelNodeExecutionResponse, error)
	// Node Management
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	UnregisterNode(context.Context, *UnregisterNodeRequest) (*UnregisterNodeResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	GetNodeSchema(context.Context, *GetNodeSchemaRequest) (*GetNodeSchemaResponse, error)
	// Plugin Management
	InstallPlugin(context.Context, *InstallPluginRequest) (*InstallPluginResponse, error)
	UninstallPlugin(context.Context, *UninstallPluginRequest) (*UninstallPluginResponse, error)
	ValidatePlugin(context.Context, *ValidatePluginRequest) (*ValidatePluginResponse, error)
	// Runtime Management
	GetRunnerStatus(context.Context, *GetRunnerStatusRequest) (*GetRunnerStatusResponse, error)
	UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*UpdateSecurityPolicyResponse, error)
	// Health Check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedNodeRunnerServiceServer()
}

// UnimplementedNodeRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeRunnerServiceServer struct{}

func (UnimplementedNodeRunnerServiceServer) ExecuteNode(context.Context, *ExecuteNodeRequest) (*ExecuteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteNode not implemented")
}
func (UnimplementedNodeRunnerServiceServer) CancelNodeExecution(context.Context, *CancelNodeExecutionRequest) (*CancelNodeExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNodeExecution not implemented")
}
func (UnimplementedNodeRunnerServiceServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedNodeRunnerServiceServer) UnregisterNode(context.Context, *UnregisterNodeRequest) (*UnregisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterNode not implemented")
}
func (UnimplementedNodeRunnerServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedNodeRunnerServiceServer) GetNodeSchema(context.Context, *GetNodeSchemaRequest) (*GetNodeSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSchema not implemented")
}
func (UnimplementedNodeRunnerServiceServer) InstallPlugin(context.Context, *InstallPluginRequest) (*InstallPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallPlugin not implemented")
}
func (UnimplementedNodeRunnerServiceServer) UninstallPlugin(context.Context, *UninstallPluginRequest) (*UninstallPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallPlugin not implemented")
}
func (UnimplementedNodeRunnerServiceServer) ValidatePlugin(context.Context, *ValidatePluginRequest) (*ValidatePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePlugin not implemented")
}
func (UnimplementedNodeRunnerServiceServer) GetRunnerStatus(context.Context, *GetRunnerStatusRequest) (*GetRunnerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunnerStatus not implemented")
}
func (UnimplementedNodeRunnerServiceServer) UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*UpdateSecurityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityPolicy not implemented")
}
func (UnimplementedNodeRunnerServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedNodeRunnerServiceServer) mustEmbedUnimplementedNodeRunnerServiceServer() {}
func (UnimplementedNodeRunnerServiceServer) testEmbeddedByValue()                           {}

// UnsafeNodeRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeRunnerServiceServer will
// result in compilation errors.
type UnsafeNodeRunnerServiceServer interface {
	mustEmbedUnimplementedNodeRunnerServiceServer()
}

func RegisterNodeRunnerServiceServer(s grpc.ServiceRegistrar, srv NodeRunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeRunnerService_ServiceDesc, srv)
}

func _NodeRunnerService_ExecuteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).ExecuteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_ExecuteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).ExecuteNode(ctx, req.(*ExecuteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_CancelNodeExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelNodeExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).CancelNodeExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_CancelNodeExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).CancelNodeExecution(ctx, req.(*CancelNodeExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_UnregisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).UnregisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_UnregisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).UnregisterNode(ctx, req.(*UnregisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_GetNodeSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).GetNodeSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_GetNodeSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).GetNodeSchema(ctx, req.(*GetNodeSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_InstallPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).InstallPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_InstallPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).InstallPlugin(ctx, req.(*InstallPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_UninstallPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).UninstallPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_UninstallPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).UninstallPlugin(ctx, req.(*UninstallPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_ValidatePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).ValidatePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_ValidatePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).ValidatePlugin(ctx, req.(*ValidatePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_GetRunnerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).GetRunnerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_GetRunnerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).GetRunnerStatus(ctx, req.(*GetRunnerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_UpdateSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).UpdateSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_UpdateSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).UpdateSecurityPolicy(ctx, req.(*UpdateSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRunnerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRunnerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRunnerService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRunnerServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeRunnerService_ServiceDesc is the grpc.ServiceDesc for NodeRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node_runner.NodeRunnerService",
	HandlerType: (*NodeRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteNode",
			Handler:    _NodeRunnerService_ExecuteNode_Handler,
		},
		{
			MethodName: "CancelNodeExecution",
			Handler:    _NodeRunnerService_CancelNodeExecution_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _NodeRunnerService_RegisterNode_Handler,
		},
		{
			MethodName: "UnregisterNode",
			Handler:    _NodeRunnerService_UnregisterNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _NodeRunnerService_ListNodes_Handler,
		},
		{
			MethodName: "GetNodeSchema",
			Handler:    _NodeRunnerService_GetNodeSchema_Handler,
		},
		{
			MethodName: "InstallPlugin",
			Handler:    _NodeRunnerService_InstallPlugin_Handler,
		},
		{
			MethodName: "UninstallPlugin",
			Handler:    _NodeRunnerService_UninstallPlugin_Handler,
		},
		{
			MethodName: "ValidatePlugin",
			Handler:    _NodeRunnerService_ValidatePlugin_Handler,
		},
		{
			MethodName: "GetRunnerStatus",
			Handler:    _NodeRunnerService_GetRunnerStatus_Handler,
		},
		{
			MethodName: "UpdateSecurityPolicy",
			Handler:    _NodeRunnerService_UpdateSecurityPolicy_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _NodeRunnerService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_runner.proto",
}
