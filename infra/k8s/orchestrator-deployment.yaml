apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator-nest
  namespace: n8n-work
  labels:
    app: orchestrator-nest
    component: control-plane
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: orchestrator-nest
  template:
    metadata:
      labels:
        app: orchestrator-nest
        component: control-plane
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: n8n-work-orchestrator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: orchestrator
        image: n8n-work/orchestrator-nest:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: grpc
          containerPort: 50051
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: GRPC_PORT
          value: "50051"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: redis-url
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: rabbitmq-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: orchestrator-secrets
              key: encryption-key
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector.observability:14268/api/traces"
        - name: VAULT_ADDR
          value: "http://vault.vault:8200"
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-secrets
              key: vault-token
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 1
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: temp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: orchestrator-config
      - name: temp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["orchestrator-nest"]
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node-role.kubernetes.io/spot"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-nest
  namespace: n8n-work
  labels:
    app: orchestrator-nest
    component: control-plane
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 50051
    targetPort: grpc
    protocol: TCP
  selector:
    app: orchestrator-nest

---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-nest-headless
  namespace: n8n-work
  labels:
    app: orchestrator-nest
    component: control-plane
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 50051
    targetPort: grpc
    protocol: TCP
  selector:
    app: orchestrator-nest

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: orchestrator-nest-netpol
  namespace: n8n-work
spec:
  podSelector:
    matchLabels:
      app: orchestrator-nest
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - podSelector:
        matchLabels:
          component: execution-plane
    ports:
    - protocol: TCP
      port: 50051
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 5672  # RabbitMQ
    - protocol: TCP
      port: 8200  # Vault
    - protocol: TCP
      port: 14268 # Jaeger
    - protocol: TCP
      port: 50052 # Engine gRPC
    - protocol: UDP
      port: 53    # DNS

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orchestrator-nest-hpa
  namespace: n8n-work
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orchestrator-nest
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: orchestrator-nest-pdb
  namespace: n8n-work
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: orchestrator-nest

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: orchestrator-config
  namespace: n8n-work
data:
  config.yaml: |
    server:
      port: 3000
      grpcPort: 50051
      cors:
        origins: ['https://app.n8n-work.com', 'https://admin.n8n-work.com']
        credentials: true
    
    database:
      ssl: true
      pool:
        min: 5
        max: 20
      migrations:
        run: true
    
    cache:
      ttl: 300
      maxSize: 1000
    
    security:
      rateLimiting:
        windowMs: 60000
        max: 1000
      helmet:
        enabled: true
      jwt:
        expiresIn: '24h'
    
    observability:
      tracing:
        enabled: true
        serviceName: 'orchestrator-nest'
      metrics:
        enabled: true
        prefix: 'n8n_work_orchestrator_'
      logging:
        level: 'info'
        structured: true
    
    features:
      multiTenancy:
        enabled: true
      webhooks:
        enabled: true
        maxSize: '10MB'
      marketplace:
        enabled: true
        registryUrl: 'https://registry.n8n-work.com'

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: n8n-work-orchestrator
  namespace: n8n-work
  labels:
    app: orchestrator-nest
    component: control-plane

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: n8n-work-orchestrator
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: n8n-work-orchestrator
subjects:
- kind: ServiceAccount
  name: n8n-work-orchestrator
  namespace: n8n-work
roleRef:
  kind: ClusterRole
  name: n8n-work-orchestrator
  apiGroup: rbac.authorization.k8s.io
