# Global configuration
global:
  imageRegistry: ""
  storageClass: ""
  postgresql:
    auth:
      existingSecret: ""
  rabbitmq:
    auth:
      existingSecret: ""
  redis:
    auth:
      existingSecret: ""

# Environment-specific settings
environment: production # dev, staging, production

# Namespace configuration
namespaceOverride: ""

# Image pull secrets
imagePullSecrets: []

# Common labels
commonLabels: {}

# Common annotations
commonAnnotations: {}

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
      - ALL

# Network policies
networkPolicy:
  enabled: true
  ingress: []
  egress: []

# Service mesh integration
serviceMesh:
  enabled: false
  type: istio # istio, linkerd, consul

# Orchestrator (NestJS API)
orchestrator:
  enabled: true
  replicaCount: 3
  image:
    repository: n8n-work/orchestrator-nest
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: api.n8n-work.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: orchestrator-tls
        hosts:
          - api.n8n-work.local
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - orchestrator
            topologyKey: kubernetes.io/hostname
  
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3000"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: postgresql-secret
          key: database-url
    - name: RABBITMQ_URL
      valueFrom:
        secretKeyRef:
          name: rabbitmq-secret
          key: amqp-url
    - name: REDIS_URL
      valueFrom:
        secretKeyRef:
          name: redis-secret
          key: redis-url
  
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health/ready
      port: 3000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3

# Engine-Go (Workflow Engine)
engine-go:
  enabled: true
  replicaCount: 5
  image:
    repository: n8n-work/engine-go
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
    grpcPort: 9090
    grpcTargetPort: 9090
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  
  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 20
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 75
  
  nodeSelector:
    node-type: compute-optimized
  
  tolerations:
    - key: "compute-optimized"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - engine-go
            topologyKey: kubernetes.io/hostname
  
  env:
    - name: ENVIRONMENT
      value: "production"
    - name: LOG_LEVEL
      value: "info"
    - name: HTTP_PORT
      value: "8080"
    - name: GRPC_PORT
      value: "9090"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: postgresql-secret
          key: database-url
    - name: RABBITMQ_URL
      valueFrom:
        secretKeyRef:
          name: rabbitmq-secret
          key: amqp-url
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    grpc:
      port: 9090
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3

# Node-Runner-JS (Sandbox Runtime)
node-runner-js:
  enabled: true
  replicaCount: 10
  image:
    repository: n8n-work/node-runner-js
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3001
    targetPort: 3001
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 10
    maxReplicas: 50
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector:
    node-type: sandbox-workload
  
  tolerations:
    - key: "sandbox-workload"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - node-runner-js
            topologyKey: kubernetes.io/hostname
  
  # Enhanced security for sandbox workloads
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
  
  # Network policies for sandbox isolation
  networkPolicy:
    enabled: true
    policyTypes:
      - Ingress
      - Egress
    ingress:
      - from:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: engine-go
        ports:
          - protocol: TCP
            port: 3001
    egress:
      - to: []
        ports:
          - protocol: TCP
            port: 443 # HTTPS only
          - protocol: TCP
            port: 53  # DNS
          - protocol: UDP
            port: 53  # DNS
  
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3001"
    - name: SANDBOX_ISOLATION
      value: "microvm"
    - name: ENABLE_NETWORK_FILTERING
      value: "true"
    - name: MAX_EXECUTION_TIME
      value: "300"
    - name: MAX_MEMORY_MB
      value: "512"
  
  livenessProbe:
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health/ready
      port: 3001
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3

# PostgreSQL Database
postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    postgresPassword: ""
    username: n8n_work
    password: ""
    database: n8n_work
    existingSecret: "postgresql-secret"
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
  
  architecture: replication
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: ""
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
  
  readReplicas:
    replicaCount: 2
    persistence:
      enabled: true
      size: 100Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# RabbitMQ Message Queue
rabbitmq:
  enabled: true
  auth:
    username: n8n_work
    password: ""
    existingSecret: "rabbitmq-secret"
    secretKeys:
      adminPasswordKey: rabbitmq-password
  
  replicaCount: 3
  clustering:
    enabled: true
  
  persistence:
    enabled: true
    size: 50Gi
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis Cache
redis:
  enabled: true
  auth:
    enabled: true
    existingSecret: "redis-secret"
    existingSecretPasswordKey: "redis-password"
  
  architecture: replication
  master:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 125m
        memory: 256Mi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Observability Stack
observability:
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        size: 100Gi
      resources:
        limits:
          cpu: 2000m
          memory: 4Gi
        requests:
          cpu: 1000m
          memory: 2Gi
  
  grafana:
    enabled: true
    persistence:
      enabled: true
      size: 10Gi
    adminPassword: ""
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: http://prometheus-server:80
            access: proxy
            isDefault: true
  
  jaeger:
    enabled: true
  
  loki:
    enabled: true
    persistence:
      enabled: true
      size: 50Gi

# Pod Disruption Budgets
podDisruptionBudget:
  orchestrator:
    enabled: true
    minAvailable: 2
  engine-go:
    enabled: true
    minAvailable: 3
  node-runner-js:
    enabled: true
    minAvailable: 5

# Priority Classes
priorityClass:
  create: true
  name: n8n-work-high
  value: 1000
  globalDefault: false
  description: "High priority class for N8N Work components"