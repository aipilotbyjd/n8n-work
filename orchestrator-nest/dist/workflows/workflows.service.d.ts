import { Repository } from 'typeorm';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { Cache } from 'cache-manager';
import { Workflow } from './entities/workflow.entity';
import { CreateWorkflowDto } from './dto/create-workflow.dto';
import { UpdateWorkflowDto } from './dto/update-workflow.dto';
import { ListWorkflowsDto } from './dto/list-workflows.dto';
import { WorkflowValidationService } from './workflow-validation.service';
import { AuthUser } from '../auth/interfaces/auth-user.interface';
import { TenantService } from '../tenants/tenants.service';
import { PaginatedResult } from '../common/interfaces/paginated-result.interface';
import { WorkflowCompilerService } from './workflow-compiler.service';
import { MetricsService } from '../observability/metrics.service';
import { AuditLogService } from '../audit/audit-log.service';
export declare class WorkflowsService {
    private readonly workflowRepository;
    private readonly cacheManager;
    private readonly eventEmitter;
    private readonly workflowValidationService;
    private readonly workflowCompilerService;
    private readonly tenantService;
    private readonly metricsService;
    private readonly auditLogService;
    private readonly logger;
    constructor(workflowRepository: Repository<Workflow>, cacheManager: Cache, eventEmitter: EventEmitter2, workflowValidationService: WorkflowValidationService, workflowCompilerService: WorkflowCompilerService, tenantService: TenantService, metricsService: MetricsService, auditLogService: AuditLogService);
    create(createWorkflowDto: CreateWorkflowDto, user: AuthUser): Promise<Workflow>;
    findAll(listWorkflowsDto: ListWorkflowsDto, user: AuthUser): Promise<PaginatedResult<Workflow>>;
    findOne(id: string, user: AuthUser): Promise<Workflow>;
    update(id: string, updateWorkflowDto: UpdateWorkflowDto, user: AuthUser): Promise<Workflow>;
    remove(id: string, user: AuthUser): Promise<void>;
    activate(id: string, user: AuthUser): Promise<Workflow>;
    deactivate(id: string, user: AuthUser): Promise<Workflow>;
    getWorkflowStatistics(user: AuthUser): Promise<any>;
    private clearWorkflowCache;
    private hasRecentExecutions;
}
