version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: n8n-work-postgres
    environment:
      POSTGRES_DB: n8n_work
      POSTGRES_USER: n8n_work
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_work_dev}
      POSTGRES_MULTIPLE_DATABASES: orchestrator,engine,analytics
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_work"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - n8n-work

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: n8n-work-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - n8n-work

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: n8n-work-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-n8n_work}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-n8n_work_dev}
      RABBITMQ_DEFAULT_VHOST: /n8n-work
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./infra/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./infra/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - n8n-work

  # ClickHouse Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: n8n-work-clickhouse
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-analytics}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-analytics_dev}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./infra/clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./infra/clickhouse/users.xml:/etc/clickhouse-server/users.xml
      - ./infra/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "8123:8123"
      - "9000:9000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - n8n-work

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: n8n-work-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-n8n_work_access}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-n8n_work_secret}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - n8n-work

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: n8n-work-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"
      - "14268:14268"
      - "4317:4317"
      - "4318:4318"
    networks:
      - n8n-work

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: n8n-work-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infra/prometheus/rules:/etc/prometheus/rules
    ports:
      - "9090:9090"
    depends_on:
      - orchestrator-nest
      - engine-go
      - node-runner-js
    networks:
      - n8n-work

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: n8n-work-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - n8n-work

  # Orchestrator Service (NestJS)
  orchestrator-nest:
    build:
      context: ./orchestrator-nest
      dockerfile: Dockerfile
      target: development
    container_name: n8n-work-orchestrator
    environment:
      NODE_ENV: development
      PORT: 3000
      GRPC_PORT: 50051
      DATABASE_URL: postgresql://n8n_work:${POSTGRES_PASSWORD:-n8n_work_dev}@postgres:5432/orchestrator
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-n8n_work}:${RABBITMQ_PASSWORD:-n8n_work_dev}@rabbitmq:5672/n8n-work
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-n8n_work_access}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-n8n_work_secret}
      JWT_SECRET: ${JWT_SECRET:-super_secret_jwt_key}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-super_secret_encryption_key}
    volumes:
      - ./orchestrator-nest:/app
      - /app/node_modules
      - ./proto-contracts:/app/proto-contracts
    ports:
      - "3000:3000"
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - n8n-work
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Engine Service (Go)
  engine-go:
    build:
      context: ./engine-go
      dockerfile: Dockerfile
      target: development
    container_name: n8n-work-engine
    environment:
      ENV: development
      GRPC_PORT: 50052
      HTTP_PORT: 8080
      DATABASE_URL: postgresql://n8n_work:${POSTGRES_PASSWORD:-n8n_work_dev}@postgres:5432/engine
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-n8n_work}:${RABBITMQ_PASSWORD:-n8n_work_dev}@rabbitmq:5672/n8n-work
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      PROMETHEUS_PORT: 9091
      ORCHESTRATOR_GRPC_URL: orchestrator-nest:50051
      NODE_RUNNER_GRPC_URL: node-runner-js:50052
    volumes:
      - ./engine-go:/app
      - ./proto-contracts:/app/proto-contracts
    ports:
      - "8080:8080"
      - "50052:50052"
      - "9091:9091"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      orchestrator-nest:
        condition: service_healthy
    networks:
      - n8n-work
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Runner Service (Node.js)
  node-runner-js:
    build:
      context: ./node-runner-js
      dockerfile: Dockerfile
      target: development
    container_name: n8n-work-node-runner
    environment:
      NODE_ENV: development
      GRPC_PORT: 50053
      HTTP_PORT: 3002
      REDIS_URL: redis://redis:6379
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-n8n_work_access}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-n8n_work_secret}
      ENGINE_GRPC_URL: engine-go:50052
      SECURITY_SANDBOX_UID: 1000
      SECURITY_SANDBOX_GID: 1000
      MAX_CONCURRENT_EXECUTIONS: 10
      MAX_MEMORY_PER_NODE: 536870912
      PLUGIN_REGISTRY_URL: https://registry.n8n-work.com
    volumes:
      - ./node-runner-js:/app
      - /app/node_modules
      - ./proto-contracts:/app/proto-contracts
      - node_runner_plugins:/app/plugins
      - node_runner_temp:/tmp/n8n-work
    ports:
      - "3002:3002"
      - "50053:50053"
    depends_on:
      redis:
        condition: service_healthy
      engine-go:
        condition: service_healthy
    networks:
      - n8n-work
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_PTRACE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer & API Gateway
  nginx:
    image: nginx:alpine
    container_name: n8n-work-nginx
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/conf.d:/etc/nginx/conf.d
      - ./infra/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - orchestrator-nest
      - grafana
    networks:
      - n8n-work
    restart: unless-stopped

  # HashiCorp Vault for Secrets Management (Development)
  vault:
    image: hashicorp/vault:latest
    container_name: n8n-work-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-dev-root-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./infra/vault/config.hcl:/vault/config/config.hcl
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - n8n-work
    command: ["vault", "server", "-dev", "-dev-listen-address=0.0.0.0:8200"]

networks:
  n8n-work:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  clickhouse_data:
  minio_data:
  prometheus_data:
  grafana_data:
  vault_data:
  node_runner_plugins:
  node_runner_temp:
